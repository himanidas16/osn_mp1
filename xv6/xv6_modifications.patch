#LLM GENERATED CODE BEGINS HERE 

diff --git a/Makefile b/Makefile
index 2d5f9e4..1fdb69c 100644
--- a/Makefile
+++ b/Makefile
@@ -59,7 +59,14 @@ LD = $(TOOLPREFIX)ld
 OBJCOPY = $(TOOLPREFIX)objcopy
 OBJDUMP = $(TOOLPREFIX)objdump
 
-CFLAGS = -Wall -Werror -Wno-unknown-attributes -O -fno-omit-frame-pointer -ggdb -gdwarf-2
+CFLAGS = -Wall -Werror -O -fno-omit-frame-pointer -ggdb -gdwarf-2
+
+# Add scheduler support
+ifndef SCHEDULER
+SCHEDULER := RR
+endif
+
+CFLAGS += -DSCHEDULER_$(SCHEDULER)
 CFLAGS += -MD
 CFLAGS += -mcmodel=medany
 CFLAGS += -ffreestanding
@@ -122,6 +129,36 @@ mkfs/mkfs: mkfs/mkfs.c $K/fs.h $K/param.h
 # http://www.gnu.org/software/make/manual/html_node/Chained-Rules.html
 .PRECIOUS: %.o
 
+# UPROGS=\
+# 	$U/_cat\
+# 	$U/_echo\
+# 	$U/_forktest\
+# 	$U/_grep\
+# 	$U/_init\
+# 	$U/_kill\
+# 	$U/_ln\
+# 	$U/_ls\
+# 	$U/_mkdir\
+# 	$U/_rm\
+# 	$U/_sh\
+# 	$U/_stressfs\
+# 	$U/_usertests\
+# 	$U/_grind\
+# 	$U/_wc\
+# 	$U/_zombie\
+# 	$U/_logstress\
+# 	$U/_forphan\
+# 	$U/_dorphan\
+# 	$U/_readcount\
+# 	$U/_schedtest\
+# 	$U/_simpletest\
+# 	$U/_schedulertest\
+# 	$U/_mlfqtest\
+# 	$U/_preempttest\
+# 	$U/_fullmlfqtest\
+# 	$U/_starvationtest\
+# 	$U/_longtest\
+# 	$U/_q3test
 UPROGS=\
 	$U/_cat\
 	$U/_echo\
@@ -139,9 +176,11 @@ UPROGS=\
 	$U/_grind\
 	$U/_wc\
 	$U/_zombie\
-	$U/_logstress\
-	$U/_forphan\
-	$U/_dorphan\
+	$U/_readcount\
+	$U/_schedulertest
+
+
+
 
 fs.img: mkfs/mkfs README $(UPROGS)
 	mkfs/mkfs fs.img README $(UPROGS)
diff --git a/kernel/defs.h b/kernel/defs.h
index 122d9ca..02565c9 100644
--- a/kernel/defs.h
+++ b/kernel/defs.h
@@ -89,6 +89,7 @@ int             kkill(int);
 int             killed(struct proc*);
 void            setkilled(struct proc*);
 struct cpu*     mycpu(void);
+struct cpu*     getmycpu(void);
 struct proc*    myproc();
 void            procinit(void);
 void            scheduler(void) __attribute__((noreturn));
@@ -101,7 +102,8 @@ void            yield(void);
 int             either_copyout(int user_dst, uint64 dst, void *src, uint64 len);
 int             either_copyin(void *dst, int user_src, uint64 src, uint64 len);
 void            procdump(void);
-
+void            check_preemption(void);
+void            check_starvation_prevention(void);
 // swtch.S
 void            swtch(struct context*, struct context*);
 
@@ -181,5 +183,7 @@ void            virtio_disk_init(void);
 void            virtio_disk_rw(struct buf *, int);
 void            virtio_disk_intr(void);
 
+
+
 // number of elements in fixed-size array
 #define NELEM(x) (sizeof(x)/sizeof((x)[0]))
diff --git a/kernel/fs.h b/kernel/fs.h
index 18d0dd0..139dcc9 100644
--- a/kernel/fs.h
+++ b/kernel/fs.h
@@ -53,10 +53,8 @@ struct dinode {
 // Directory is a file containing a sequence of dirent structures.
 #define DIRSIZ 14
 
-// The name field may have DIRSIZ characters and not end in a NUL
-// character.
 struct dirent {
   ushort inum;
-  char name[DIRSIZ] __attribute__((nonstring));
+  char name[DIRSIZ];
 };
 
diff --git a/kernel/proc.c b/kernel/proc.c
index 9d6cf3f..ef51544 100644
--- a/kernel/proc.c
+++ b/kernel/proc.c
@@ -15,6 +15,9 @@ struct proc *initproc;
 int nextpid = 1;
 struct spinlock pid_lock;
 
+extern uint ticks; // For MLFQ starvation prevention
+
+
 extern void forkret(void);
 static void freeproc(struct proc *p);
 
@@ -29,40 +32,140 @@ struct spinlock wait_lock;
 // Allocate a page for each process's kernel stack.
 // Map it high in memory, followed by an invalid
 // guard page.
-void
-proc_mapstacks(pagetable_t kpgtbl)
+void proc_mapstacks(pagetable_t kpgtbl)
 {
   struct proc *p;
-  
-  for(p = proc; p < &proc[NPROC]; p++) {
+
+  for (p = proc; p < &proc[NPROC]; p++)
+  {
     char *pa = kalloc();
-    if(pa == 0)
+    if (pa == 0)
       panic("kalloc");
-    uint64 va = KSTACK((int) (p - proc));
+    uint64 va = KSTACK((int)(p - proc));
     kvmmap(kpgtbl, va, (uint64)pa, PGSIZE, PTE_R | PTE_W);
   }
 }
 
+// Calculate process weight based on nice value
+// weight = 1024 / (1.25 ^ nice)
+int calculate_weight(int nice)
+{
+  // Precomputed weights for common nice values to avoid floating point
+  static int weight_table[] = {
+      88761, 71755, 56483, 46273, 36291, // nice -20 to -16
+      29154, 23254, 18705, 14949, 11916, // nice -15 to -11
+      9548, 7620, 6100, 4904, 3906,      // nice -10 to -6
+      3121, 2501, 1991, 1586, 1277,      // nice -5 to -1
+      1024,                              // nice 0
+      820, 655, 526, 423, 335,           // nice 1 to 5
+      272, 215, 172, 137, 110,           // nice 6 to 10
+      87, 70, 56, 45, 36,                // nice 11 to 15
+      29, 23, 18, 15, 15                 // nice 16 to 19
+  };
+
+  // Clamp nice value to valid range [-20, 19]
+  if (nice < -20)
+    nice = -20;
+  if (nice > 19)
+    nice = 19;
+
+  // Return weight from table (offset by 20 for negative indices)
+  return weight_table[nice + 20];
+}
+
+// ADD THESE MLFQ HELPER FUNCTIONS:
+
+// Get time slice for a queue level
+int get_time_slice(int queue_level) {
+  switch(queue_level) {
+    case 0: return 1;   // 1 tick
+    case 1: return 4;   // 4 ticks
+    case 2: return 8;   // 8 ticks
+    case 3: return 16;  // 16 ticks
+    default: return 1;
+  }
+}
+
+// Move process to next lower queue (demotion due to time slice expiry)
+void demote_process(struct proc *p) {
+  if(p->queue_level < 3) {  // Change from 2 to 3
+    p->queue_level++;
+  }
+  p->time_slice_used = 0;
+  p->queue_entry_time = ticks;
+}
+
+// Reset process to highest queue (for starvation prevention)
+void promote_to_top(struct proc *p) {
+  p->queue_level = 0;
+  p->time_slice_used = 0;
+  p->queue_entry_time = ticks;  // Update queue entry time
+}
+
+// Check if starvation prevention is needed (every 48 ticks)
+// Check if starvation prevention is needed (every 48 ticks)
+void check_starvation_prevention() {
+  static int last_boost = 0;
+  
+  // First check if there are any user processes running at all
+  int user_processes = 0;
+  for (struct proc *p = proc; p < &proc[NPROC]; p++) {
+    acquire(&p->lock);
+    if (p->state != UNUSED && p->pid > 2) {  // Exclude init and shell
+      user_processes++;
+    }
+    release(&p->lock);
+  }
+  
+  // Only proceed if there are user processes
+  if (user_processes == 0) {
+    return;  // No user processes, no need for starvation prevention
+  }
+  
+  // Check every tick, but only act every 48 ticks
+  if (ticks - last_boost >= 48) {
+    last_boost = ticks;
+    
+    printf("\n*** STARVATION PREVENTION TRIGGERED AT TICK %d ***\n", ticks);
+    
+    int promoted_count = 0;
+    for (struct proc *p = proc; p < &proc[NPROC]; p++) {
+      acquire(&p->lock);
+      if (p->state != UNUSED && p->pid > 2) {  // Exclude init and shell
+        if (p->queue_level > 0) {
+          printf("Promoting PID %d from Queue %d to Queue 0\n", p->pid, p->queue_level);
+          promote_to_top(p);
+          promoted_count++;
+        }
+      }
+      release(&p->lock);
+    }
+    
+    if (promoted_count > 0) {
+      printf("*** STARVATION PREVENTION: Promoted %d processes ***\n\n", promoted_count);
+    }
+  }
+}
+
 // initialize the proc table.
-void
-procinit(void)
+void procinit(void)
 {
   struct proc *p;
-  
+
   initlock(&pid_lock, "nextpid");
   initlock(&wait_lock, "wait_lock");
-  for(p = proc; p < &proc[NPROC]; p++) {
-      initlock(&p->lock, "proc");
-      p->state = UNUSED;
-      p->kstack = KSTACK((int) (p - proc));
+  for (p = proc; p < &proc[NPROC]; p++)
+  {
+    initlock(&p->lock, "proc");
+    p->state = UNUSED;
+    p->kstack = KSTACK((int)(p - proc));
   }
 }
 
 // Must be called with interrupts disabled,
 // to prevent race with process being moved
 // to a different CPU.
-int
-cpuid()
+int cpuid()
 {
   int id = r_tp();
   return id;
@@ -70,7 +173,7 @@ cpuid()
 
 // Return this CPU's cpu struct.
 // Interrupts must be disabled.
-struct cpu*
+struct cpu *
 mycpu(void)
 {
   int id = cpuid();
@@ -79,7 +182,7 @@ mycpu(void)
 }
 
 // Return the current struct proc *, or zero if none.
-struct proc*
+struct proc *
 myproc(void)
 {
   push_off();
@@ -89,11 +192,10 @@ myproc(void)
   return p;
 }
 
-int
-allocpid()
+int allocpid()
 {
   int pid;
-  
+
   acquire(&pid_lock);
   pid = nextpid;
   nextpid = nextpid + 1;
@@ -106,14 +208,14 @@ allocpid()
 // If found, initialize state required to run in the kernel,
 // and return with p->lock held.
 // If there are no free procs, or a memory allocation fails, return 0.
-static struct proc*
+static struct proc *
 allocproc(void)
 {
   struct proc *p;
 
-  for(p = proc; p < &proc[NPROC]; p++) {
+  for (p = proc; p < &proc[NPROC]; p++) {
     acquire(&p->lock);
-    if(p->state == UNUSED) {
+    if (p->state == UNUSED) {
       goto found;
     } else {
       release(&p->lock);
@@ -125,8 +227,26 @@ found:
   p->pid = allocpid();
   p->state = USED;
 
+  // Initialize scheduling fields
+  p->ctime = ticks; // Set creation time to current ticks
+  p->vruntime = 0;  // Initialize virtual runtime
+  p->rtime = 0;     // Initialize running time
+  p->nice = 0;                           // Default nice value
+  p->weight = calculate_weight(p->nice); // Calculate weight based on nice
+
+
+  // ADD THESE MLFQ INITIALIZATIONS:
+  p->queue_level = 0;          // Start in highest priority queue
+  p->time_slice_used = 0;      // No time used initially
+  p->last_scheduled = ticks;   // Set to current time
+  p->queue_entry_time = ticks; // Initialize queue entry time
+  p->preempted = 0;            // Initialize preemption flag
+  p->total_preemptions = 0;    // Initialize preemption count
+
+
   // Allocate a trapframe page.
-  if((p->trapframe = (struct trapframe *)kalloc()) == 0){
+  if ((p->trapframe = (struct trapframe *)kalloc()) == 0)
+  {
     freeproc(p);
     release(&p->lock);
     return 0;
@@ -134,7 +254,8 @@ found:
 
   // An empty user page table.
   p->pagetable = proc_pagetable(p);
-  if(p->pagetable == 0){
+  if (p->pagetable == 0)
+  {
     freeproc(p);
     release(&p->lock);
     return 0;
@@ -155,10 +276,10 @@ found:
 static void
 freeproc(struct proc *p)
 {
-  if(p->trapframe)
-    kfree((void*)p->trapframe);
+  if (p->trapframe)
+    kfree((void *)p->trapframe);
   p->trapframe = 0;
-  if(p->pagetable)
+  if (p->pagetable)
     proc_freepagetable(p->pagetable, p->sz);
   p->pagetable = 0;
   p->sz = 0;
@@ -180,23 +301,25 @@ proc_pagetable(struct proc *p)
 
   // An empty page table.
   pagetable = uvmcreate();
-  if(pagetable == 0)
+  if (pagetable == 0)
     return 0;
 
   // map the trampoline code (for system call return)
   // at the highest user virtual address.
   // only the supervisor uses it, on the way
   // to/from user space, so not PTE_U.
-  if(mappages(pagetable, TRAMPOLINE, PGSIZE,
-              (uint64)trampoline, PTE_R | PTE_X) < 0){
+  if (mappages(pagetable, TRAMPOLINE, PGSIZE,
+               (uint64)trampoline, PTE_R | PTE_X) < 0)
+  {
     uvmfree(pagetable, 0);
     return 0;
   }
 
   // map the trapframe page just below the trampoline page, for
   // trampoline.S.
-  if(mappages(pagetable, TRAPFRAME, PGSIZE,
-              (uint64)(p->trapframe), PTE_R | PTE_W) < 0){
+  if (mappages(pagetable, TRAPFRAME, PGSIZE,
+               (uint64)(p->trapframe), PTE_R | PTE_W) < 0)
+  {
     uvmunmap(pagetable, TRAMPOLINE, 1, 0);
     uvmfree(pagetable, 0);
     return 0;
@@ -207,8 +330,7 @@ proc_pagetable(struct proc *p)
 
 // Free a process's page table, and free the
 // physical memory it refers to.
-void
-proc_freepagetable(pagetable_t pagetable, uint64 sz)
+void proc_freepagetable(pagetable_t pagetable, uint64 sz)
 {
   uvmunmap(pagetable, TRAMPOLINE, 1, 0);
   uvmunmap(pagetable, TRAPFRAME, 1, 0);
@@ -216,14 +338,13 @@ proc_freepagetable(pagetable_t pagetable, uint64 sz)
 }
 
 // Set up first user process.
-void
-userinit(void)
+void userinit(void)
 {
   struct proc *p;
 
   p = allocproc();
   initproc = p;
-  
+
   p->cwd = namei("/");
 
   p->state = RUNNABLE;
@@ -233,18 +354,21 @@ userinit(void)
 
 // Shrink user memory by n bytes.
 // Return 0 on success, -1 on failure.
-int
-growproc(int n)
+int growproc(int n)
 {
   uint64 sz;
   struct proc *p = myproc();
 
   sz = p->sz;
-  if(n > 0){
-    if((sz = uvmalloc(p->pagetable, sz, sz + n, PTE_W)) == 0) {
+  if (n > 0)
+  {
+    if ((sz = uvmalloc(p->pagetable, sz, sz + n, PTE_W)) == 0)
+    {
       return -1;
     }
-  } else if(n < 0){
+  }
+  else if (n < 0)
+  {
     sz = uvmdealloc(p->pagetable, sz, sz + n);
   }
   p->sz = sz;
@@ -253,20 +377,21 @@ growproc(int n)
 
 // Create a new process, copying the parent.
 // Sets up child kernel stack to return as if from fork() system call.
-int
-kfork(void)
+int kfork(void)
 {
   int i, pid;
   struct proc *np;
   struct proc *p = myproc();
 
   // Allocate process.
-  if((np = allocproc()) == 0){
+  if ((np = allocproc()) == 0)
+  {
     return -1;
   }
 
   // Copy user memory from parent to child.
-  if(uvmcopy(p->pagetable, np->pagetable, p->sz) < 0){
+  if (uvmcopy(p->pagetable, np->pagetable, p->sz) < 0)
+  {
     freeproc(np);
     release(&np->lock);
     return -1;
@@ -280,8 +405,8 @@ kfork(void)
   np->trapframe->a0 = 0;
 
   // increment reference counts on open file descriptors.
-  for(i = 0; i < NOFILE; i++)
-    if(p->ofile[i])
+  for (i = 0; i < NOFILE; i++)
+    if (p->ofile[i])
       np->ofile[i] = filedup(p->ofile[i]);
   np->cwd = idup(p->cwd);
 
@@ -304,13 +429,14 @@ kfork(void)
 
 // Pass p's abandoned children to init.
 // Caller must hold wait_lock.
-void
-reparent(struct proc *p)
+void reparent(struct proc *p)
 {
   struct proc *pp;
 
-  for(pp = proc; pp < &proc[NPROC]; pp++){
-    if(pp->parent == p){
+  for (pp = proc; pp < &proc[NPROC]; pp++)
+  {
+    if (pp->parent == p)
+    {
       pp->parent = initproc;
       wakeup(initproc);
     }
@@ -320,17 +446,18 @@ reparent(struct proc *p)
 // Exit the current process.  Does not return.
 // An exited process remains in the zombie state
 // until its parent calls wait().
-void
-kexit(int status)
+void kexit(int status)
 {
   struct proc *p = myproc();
 
-  if(p == initproc)
+  if (p == initproc)
     panic("init exiting");
 
   // Close all open files.
-  for(int fd = 0; fd < NOFILE; fd++){
-    if(p->ofile[fd]){
+  for (int fd = 0; fd < NOFILE; fd++)
+  {
+    if (p->ofile[fd])
+    {
       struct file *f = p->ofile[fd];
       fileclose(f);
       p->ofile[fd] = 0;
@@ -349,7 +476,7 @@ kexit(int status)
 
   // Parent might be sleeping in wait().
   wakeup(p->parent);
-  
+
   acquire(&p->lock);
 
   p->xstate = status;
@@ -364,8 +491,7 @@ kexit(int status)
 
 // Wait for a child process to exit and return its pid.
 // Return -1 if this process has no children.
-int
-kwait(uint64 addr)
+int kwait(uint64 addr)
 {
   struct proc *pp;
   int havekids, pid;
@@ -373,20 +499,25 @@ kwait(uint64 addr)
 
   acquire(&wait_lock);
 
-  for(;;){
+  for (;;)
+  {
     // Scan through table looking for exited children.
     havekids = 0;
-    for(pp = proc; pp < &proc[NPROC]; pp++){
-      if(pp->parent == p){
+    for (pp = proc; pp < &proc[NPROC]; pp++)
+    {
+      if (pp->parent == p)
+      {
         // make sure the child isn't still in exit() or swtch().
         acquire(&pp->lock);
 
         havekids = 1;
-        if(pp->state == ZOMBIE){
+        if (pp->state == ZOMBIE)
+        {
           // Found one.
           pid = pp->pid;
-          if(addr != 0 && copyout(p->pagetable, addr, (char *)&pp->xstate,
-                                  sizeof(pp->xstate)) < 0) {
+          if (addr != 0 && copyout(p->pagetable, addr, (char *)&pp->xstate,
+                                   sizeof(pp->xstate)) < 0)
+          {
             release(&pp->lock);
             release(&wait_lock);
             return -1;
@@ -401,61 +532,358 @@ kwait(uint64 addr)
     }
 
     // No point waiting if we don't have any children.
-    if(!havekids || killed(p)){
+    if (!havekids || killed(p))
+    {
       release(&wait_lock);
       return -1;
     }
-    
+
     // Wait for a child to exit.
-    sleep(p, &wait_lock);  //DOC: wait-sleep
+    sleep(p, &wait_lock); // DOC: wait-sleep
   }
 }
 
-// Per-CPU process scheduler.
-// Each CPU calls scheduler() after setting itself up.
-// Scheduler never returns.  It loops, doing:
-//  - choose a process to run.
-//  - swtch to start running that process.
-//  - eventually that process transfers control
-//    via swtch back to the scheduler.
-void
-scheduler(void)
+
+void scheduler(void)
 {
   struct proc *p;
   struct cpu *c = mycpu();
 
   c->proc = 0;
-  for(;;){
-    // The most recent process to run may have had interrupts
-    // turned off; enable them to avoid a deadlock if all
-    // processes are waiting. Then turn them back off
-    // to avoid a possible race between an interrupt
-    // and wfi.
+  for (;;)
+  {
     intr_on();
-    intr_off();
 
-    int found = 0;
-    for(p = proc; p < &proc[NPROC]; p++) {
+#ifdef SCHEDULER_MLFQ
+    check_starvation_prevention();
+
+    struct proc *selected = 0;
+    int highest_priority = 4;
+    static int last_queue3_index = 0; // For round-robin in queue 3
+
+    // Count user processes for logging
+    int user_processes = 0;
+    for (p = proc; p < &proc[NPROC]; p++) {
+      acquire(&p->lock);
+      if (p->state == RUNNABLE && p->pid > 2) {
+        user_processes++;
+      }
+      release(&p->lock);
+    }
+
+    // Log MLFQ state when multiple user processes are running
+    if (user_processes > 1) {
+      printf("[MLFQ Scheduler Tick]\n");
+      for (p = proc; p < &proc[NPROC]; p++) {
+        acquire(&p->lock);
+        if (p->state == RUNNABLE && p->pid > 2) {
+          printf("PID: %d | Queue: %d | Time Used: %d/%d\n", 
+                 p->pid, p->queue_level, p->time_slice_used, get_time_slice(p->queue_level));
+        }
+        release(&p->lock);
+      }
+    }
+
+    // Find the highest priority level with runnable processes
+    for (p = proc; p < &proc[NPROC]; p++) {
       acquire(&p->lock);
-      if(p->state == RUNNABLE) {
-        // Switch to chosen process.  It is the process's job
-        // to release its lock and then reacquire it
-        // before jumping back to us.
+      if (p->state == RUNNABLE && p->queue_level < highest_priority) {
+        highest_priority = p->queue_level;
+      }
+      release(&p->lock);
+    }
+
+    // Selection logic with Queue 3 round-robin
+    if (highest_priority == 3) {
+      // Round-robin scheduling for Queue 3
+      int processes_checked = 0;
+      int total_processes = NPROC;
+      
+      while (processes_checked < total_processes) {
+        int current_index = (last_queue3_index + processes_checked) % NPROC;
+        p = &proc[current_index];
+        
+        acquire(&p->lock);
+        if (p->state == RUNNABLE && p->queue_level == 3) {
+          selected = p;
+          last_queue3_index = (current_index + 1) % NPROC;
+          break;
+        } else {
+          release(&p->lock);
+        }
+        processes_checked++;
+      }
+    } else {
+      // For other queues: Select first process at highest priority
+      for (p = proc; p < &proc[NPROC]; p++) {
+        acquire(&p->lock);
+        if (p->state == RUNNABLE && p->queue_level == highest_priority) {
+          selected = p;
+          break;
+        } else {
+          release(&p->lock);
+        }
+      }
+    }
+
+    // Execute selected process
+    if (selected != 0) {
+      if (user_processes > 1 && selected->pid > 2) {
+        if (selected->queue_level == 3) {
+          printf("--> Scheduling PID %d from Queue 3 (Round-Robin)\n", selected->pid);
+        } else {
+          printf("--> Scheduling PID %d from Queue %d\n", selected->pid, selected->queue_level);
+        }
+      }
+
+      // Run the selected process
+      selected->state = RUNNING;
+      c->proc = selected;
+      selected->last_scheduled = ticks;
+
+      int start_ticks = ticks;
+      int time_slice = get_time_slice(selected->queue_level);
+
+      swtch(&c->context, &selected->context);
+
+      // Process returned to scheduler
+      int ticks_used = ticks - start_ticks;
+      selected->rtime += ticks_used;
+
+      if (selected->state == RUNNABLE) {
+        selected->time_slice_used += ticks_used;
+
+        // Check if time slice is expired
+        if (selected->time_slice_used >= time_slice) {
+          // Time slice expired - demote process
+          int old_queue = selected->queue_level;
+          demote_process(selected);
+          if (selected->pid > 2) {
+            printf("PID %d: Time slice expired! Moving from Queue %d to Queue %d\n", 
+                   selected->pid, old_queue, selected->queue_level);
+          }
+        } else {
+          // Process yielded voluntarily - keep in same queue
+          if (selected->pid > 2) {
+            printf("PID %d: Voluntary yield, staying in Queue %d (used %d/%d ticks)\n", 
+                   selected->pid, selected->queue_level, selected->time_slice_used, time_slice);
+          }
+        }
+      }
+
+      c->proc = 0;
+      release(&selected->lock);
+    }
+
+#elif defined(SCHEDULER_CFS)
+    // CFS Scheduler with vRuntime logging
+    struct proc *min_vruntime_proc = 0;
+    int min_vruntime = __INT_MAX__;
+    int runnable_count = 0;
+
+    // First pass: count runnable processes
+    for (p = proc; p < &proc[NPROC]; p++)
+    {
+      acquire(&p->lock);
+      if (p->state == RUNNABLE)
+      {
+        runnable_count++;
+      }
+      release(&p->lock);
+    }
+
+    // Log all runnable processes before scheduling decision
+    if (runnable_count > 1)
+    { // Only log when multiple processes
+      printf("[Scheduler Tick]\n");
+      for (p = proc; p < &proc[NPROC]; p++)
+      {
+        acquire(&p->lock);
+        if (p->state == RUNNABLE)
+        {
+          printf("PID: %d | vRuntime: %d\n", p->pid, p->vruntime);
+        }
+        release(&p->lock);
+      }
+
+      // Find process with minimum vruntime
+      for (p = proc; p < &proc[NPROC]; p++)
+      {
+        acquire(&p->lock);
+        if (p->state == RUNNABLE && p->vruntime < min_vruntime)
+        {
+          if (min_vruntime_proc != 0)
+          {
+            release(&min_vruntime_proc->lock);
+          }
+          min_vruntime_proc = p;
+          min_vruntime = p->vruntime;
+        }
+        else
+        {
+          release(&p->lock);
+        }
+      }
+
+      if (min_vruntime_proc != 0)
+      {
+        printf("--> Scheduling PID %d (lowest vRuntime)\n", min_vruntime_proc->pid);
+      }
+    }
+    else
+    {
+      // Single process case - just find it without logging
+      for (p = proc; p < &proc[NPROC]; p++)
+      {
+        acquire(&p->lock);
+        if (p->state == RUNNABLE)
+        {
+          min_vruntime_proc = p;
+          min_vruntime = p->vruntime;
+          break;
+        }
+        else
+        {
+          release(&p->lock);
+        }
+      }
+    }
+
+    if (min_vruntime_proc != 0)
+    {
+      // Calculate time slice: target_latency / runnable_processes, min 3 ticks
+      int time_slice = 48 / runnable_count;
+      if (time_slice < 3)
+        time_slice = 3;
+
+      // Switch to chosen process
+      min_vruntime_proc->state = RUNNING;
+      c->proc = min_vruntime_proc;
+
+      int start_ticks = ticks;
+      swtch(&c->context, &min_vruntime_proc->context);
+
+      // Update vruntime after process runs
+      int ticks_run = ticks - start_ticks;
+      if (ticks_run > 0)
+      {
+        min_vruntime_proc->vruntime += ticks_run * 1024 / min_vruntime_proc->weight;
+      }
+      else
+      {
+        min_vruntime_proc->vruntime += 1; // Minimum increment
+      }
+      min_vruntime_proc->rtime += ticks_run;
+
+      c->proc = 0;
+      release(&min_vruntime_proc->lock);
+    }
+
+#elif defined(SCHEDULER_FCFS)
+    // FCFS Scheduler with logging
+    struct proc *earliest = 0;
+    int earliest_time = __INT_MAX__;
+    int runnable_count = 0;
+
+    // First pass: count runnable processes
+    for (p = proc; p < &proc[NPROC]; p++)
+    {
+      acquire(&p->lock);
+      if (p->state == RUNNABLE)
+      {
+        runnable_count++;
+      }
+      release(&p->lock);
+    }
+
+    if (runnable_count > 1)
+    { // Only log when multiple processes
+      printf("[FCFS Scheduler Tick]\n");
+      for (p = proc; p < &proc[NPROC]; p++)
+      {
+        acquire(&p->lock);
+        if (p->state == RUNNABLE)
+        {
+          printf("PID: %d | Creation Time: %d\n", p->pid, p->ctime);
+        }
+        release(&p->lock);
+      }
+
+      // Find earliest process
+      for (p = proc; p < &proc[NPROC]; p++)
+      {
+        acquire(&p->lock);
+        if (p->state == RUNNABLE && p->ctime < earliest_time)
+        {
+          if (earliest != 0)
+          {
+            release(&earliest->lock);
+          }
+          earliest = p;
+          earliest_time = p->ctime;
+        }
+        else
+        {
+          release(&p->lock);
+        }
+      }
+
+      if (earliest != 0)
+      {
+        printf("--> Scheduling PID %d (earliest creation time: %d)\n", earliest->pid, earliest_time);
+      }
+    }
+    else
+    {
+      // Single process case - just find it without logging
+      for (p = proc; p < &proc[NPROC]; p++)
+      {
+        acquire(&p->lock);
+        if (p->state == RUNNABLE)
+        {
+          earliest = p;
+          earliest_time = p->ctime;
+          break;
+        }
+        else
+        {
+          release(&p->lock);
+        }
+      }
+    }
+
+    if (earliest != 0)
+    {
+      // Switch to chosen process
+      earliest->state = RUNNING;
+      c->proc = earliest;
+
+      int start_ticks = ticks;
+      swtch(&c->context, &earliest->context);
+      int ticks_run = ticks - start_ticks;
+
+      // Update running time
+      earliest->rtime += ticks_run;
+
+      c->proc = 0;
+      release(&earliest->lock);
+    }
+
+#else
+    // Default Round Robin Scheduler
+    for (p = proc; p < &proc[NPROC]; p++)
+    {
+      acquire(&p->lock);
+      if (p->state == RUNNABLE)
+      {
         p->state = RUNNING;
         c->proc = p;
         swtch(&c->context, &p->context);
-
-        // Process is done running for now.
-        // It should have changed its p->state before coming back.
         c->proc = 0;
-        found = 1;
       }
       release(&p->lock);
     }
-    if(found == 0) {
-      // nothing to run; stop running on this core until an interrupt.
-      asm volatile("wfi");
-    }
+#endif
   }
 }
 
@@ -466,19 +894,18 @@ scheduler(void)
 // be proc->intena and proc->noff, but that would
 // break in the few places where a lock is held but
 // there's no process.
-void
-sched(void)
+void sched(void)
 {
   int intena;
   struct proc *p = myproc();
 
-  if(!holding(&p->lock))
+  if (!holding(&p->lock))
     panic("sched p->lock");
-  if(mycpu()->noff != 1)
+  if (mycpu()->noff != 1)
     panic("sched locks");
-  if(p->state == RUNNING)
+  if (p->state == RUNNING)
     panic("sched RUNNING");
-  if(intr_get())
+  if (intr_get())
     panic("sched interruptible");
 
   intena = mycpu()->intena;
@@ -487,8 +914,7 @@ sched(void)
 }
 
 // Give up the CPU for one scheduling round.
-void
-yield(void)
+void yield(void)
 {
   struct proc *p = myproc();
   acquire(&p->lock);
@@ -499,8 +925,7 @@ yield(void)
 
 // A fork child's very first scheduling by scheduler()
 // will swtch to forkret.
-void
-forkret(void)
+void forkret(void)
 {
   extern char userret[];
   static int first = 1;
@@ -509,7 +934,8 @@ forkret(void)
   // Still holding p->lock from scheduler.
   release(&p->lock);
 
-  if (first) {
+  if (first)
+  {
     // File system initialization must be run in the context of a
     // regular process (e.g., because it calls sleep), and thus cannot
     // be run from main().
@@ -521,8 +947,9 @@ forkret(void)
 
     // We can invoke kexec() now that file system is initialized.
     // Put the return value (argc) of kexec into a0.
-    p->trapframe->a0 = kexec("/init", (char *[]){ "/init", 0 });
-    if (p->trapframe->a0 == -1) {
+    p->trapframe->a0 = kexec("/init", (char *[]){"/init", 0});
+    if (p->trapframe->a0 == -1)
+    {
       panic("exec");
     }
   }
@@ -536,11 +963,10 @@ forkret(void)
 
 // Sleep on channel chan, releasing condition lock lk.
 // Re-acquires lk when awakened.
-void
-sleep(void *chan, struct spinlock *lk)
+void sleep(void *chan, struct spinlock *lk)
 {
   struct proc *p = myproc();
-  
+
   // Must acquire p->lock in order to
   // change p->state and then call sched.
   // Once we hold p->lock, we can be
@@ -548,7 +974,7 @@ sleep(void *chan, struct spinlock *lk)
   // (wakeup locks p->lock),
   // so it's okay to release lk.
 
-  acquire(&p->lock);  //DOC: sleeplock1
+  acquire(&p->lock); // DOC: sleeplock1
   release(lk);
 
   // Go to sleep.
@@ -567,15 +993,17 @@ sleep(void *chan, struct spinlock *lk)
 
 // Wake up all processes sleeping on channel chan.
 // Caller should hold the condition lock.
-void
-wakeup(void *chan)
+void wakeup(void *chan)
 {
   struct proc *p;
 
-  for(p = proc; p < &proc[NPROC]; p++) {
-    if(p != myproc()){
+  for (p = proc; p < &proc[NPROC]; p++)
+  {
+    if (p != myproc())
+    {
       acquire(&p->lock);
-      if(p->state == SLEEPING && p->chan == chan) {
+      if (p->state == SLEEPING && p->chan == chan)
+      {
         p->state = RUNNABLE;
       }
       release(&p->lock);
@@ -586,16 +1014,18 @@ wakeup(void *chan)
 // Kill the process with the given pid.
 // The victim won't exit until it tries to return
 // to user space (see usertrap() in trap.c).
-int
-kkill(int pid)
+int kkill(int pid)
 {
   struct proc *p;
 
-  for(p = proc; p < &proc[NPROC]; p++){
+  for (p = proc; p < &proc[NPROC]; p++)
+  {
     acquire(&p->lock);
-    if(p->pid == pid){
+    if (p->pid == pid)
+    {
       p->killed = 1;
-      if(p->state == SLEEPING){
+      if (p->state == SLEEPING)
+      {
         // Wake process from sleep().
         p->state = RUNNABLE;
       }
@@ -607,19 +1037,17 @@ kkill(int pid)
   return -1;
 }
 
-void
-setkilled(struct proc *p)
+void setkilled(struct proc *p)
 {
   acquire(&p->lock);
   p->killed = 1;
   release(&p->lock);
 }
 
-int
-killed(struct proc *p)
+int killed(struct proc *p)
 {
   int k;
-  
+
   acquire(&p->lock);
   k = p->killed;
   release(&p->lock);
@@ -629,13 +1057,15 @@ killed(struct proc *p)
 // Copy to either a user address, or kernel address,
 // depending on usr_dst.
 // Returns 0 on success, -1 on error.
-int
-either_copyout(int user_dst, uint64 dst, void *src, uint64 len)
+int either_copyout(int user_dst, uint64 dst, void *src, uint64 len)
 {
   struct proc *p = myproc();
-  if(user_dst){
+  if (user_dst)
+  {
     return copyout(p->pagetable, dst, src, len);
-  } else {
+  }
+  else
+  {
     memmove((char *)dst, src, len);
     return 0;
   }
@@ -644,14 +1074,16 @@ either_copyout(int user_dst, uint64 dst, void *src, uint64 len)
 // Copy from either a user address, or kernel address,
 // depending on usr_src.
 // Returns 0 on success, -1 on error.
-int
-either_copyin(void *dst, int user_src, uint64 src, uint64 len)
+int either_copyin(void *dst, int user_src, uint64 src, uint64 len)
 {
   struct proc *p = myproc();
-  if(user_src){
+  if (user_src)
+  {
     return copyin(p->pagetable, dst, src, len);
-  } else {
-    memmove(dst, (char*)src, len);
+  }
+  else
+  {
+    memmove(dst, (char *)src, len);
     return 0;
   }
 }
@@ -659,25 +1091,24 @@ either_copyin(void *dst, int user_src, uint64 src, uint64 len)
 // Print a process listing to console.  For debugging.
 // Runs when user types ^P on console.
 // No lock to avoid wedging a stuck machine further.
-void
-procdump(void)
+void procdump(void)
 {
   static char *states[] = {
-  [UNUSED]    "unused",
-  [USED]      "used",
-  [SLEEPING]  "sleep ",
-  [RUNNABLE]  "runble",
-  [RUNNING]   "run   ",
-  [ZOMBIE]    "zombie"
-  };
+      [UNUSED] "unused",
+      [USED] "used",
+      [SLEEPING] "sleep ",
+      [RUNNABLE] "runble",
+      [RUNNING] "run   ",
+      [ZOMBIE] "zombie"};
   struct proc *p;
   char *state;
 
   printf("\n");
-  for(p = proc; p < &proc[NPROC]; p++){
-    if(p->state == UNUSED)
+  for (p = proc; p < &proc[NPROC]; p++)
+  {
+    if (p->state == UNUSED)
       continue;
-    if(p->state >= 0 && p->state < NELEM(states) && states[p->state])
+    if (p->state >= 0 && p->state < NELEM(states) && states[p->state])
       state = states[p->state];
     else
       state = "???";
@@ -685,3 +1116,31 @@ procdump(void)
     printf("\n");
   }
 }
+
+// Check if current process should be preempted by higher priority process
+void check_preemption(void) {
+  struct proc *p = myproc();
+  
+  if(p == 0 || p->state != RUNNING || p->pid <= 2)
+    return;
+    
+  int current_queue = p->queue_level;
+  int should_preempt = 0;
+  
+  // Check if there's a higher priority process ready
+  for(struct proc *check_proc = proc; check_proc < &proc[NPROC]; check_proc++) {
+    acquire(&check_proc->lock);
+    if(check_proc != p && check_proc->state == RUNNABLE && 
+       check_proc->queue_level < current_queue) {
+      should_preempt = 1;
+      release(&check_proc->lock);
+      break;
+    }
+    release(&check_proc->lock);
+  }
+  
+  if(should_preempt) {
+    yield();
+  }
+}
+
diff --git a/kernel/proc.h b/kernel/proc.h
index d021857..7c17e0c 100644
--- a/kernel/proc.h
+++ b/kernel/proc.h
@@ -104,4 +104,19 @@ struct proc {
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+
+  // Scheduling fields
+  int ctime;                   // Creation time (for FCFS)
+  int vruntime;               // Virtual runtime (for CFS) 
+  int rtime;                  // Total running time
+  int weight;                 // Process weight (for CFS)
+  int nice;                   // Nice value (for CFS)
+
+  // ADD THESE NEW MLFQ FIELDS:
+  int queue_level;            // Current queue level (0-3)
+  int time_slice_used;        // Time used in current slice
+  int last_scheduled;         // Last time this process was scheduled
+  int queue_entry_time;       // When process entered current queue (for FIFO within queue)
+  int preempted;              // Flag: was this process preempted?
+  int total_preemptions;      // Count of times preempted
 };
diff --git a/kernel/syscall.c b/kernel/syscall.c
index 076d965..f961529 100644
--- a/kernel/syscall.c
+++ b/kernel/syscall.c
@@ -101,7 +101,7 @@ extern uint64 sys_unlink(void);
 extern uint64 sys_link(void);
 extern uint64 sys_mkdir(void);
 extern uint64 sys_close(void);
-
+extern uint64 sys_getreadcount(void);
 // An array mapping syscall numbers from syscall.h
 // to the function that handles the system call.
 static uint64 (*syscalls[])(void) = {
@@ -126,6 +126,7 @@ static uint64 (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_getreadcount] sys_getreadcount,
 };
 
 void
diff --git a/kernel/syscall.h b/kernel/syscall.h
index 3dd926d..0cf477a 100644
--- a/kernel/syscall.h
+++ b/kernel/syscall.h
@@ -20,3 +20,4 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_getreadcount 22
diff --git a/kernel/sysfile.c b/kernel/sysfile.c
index d8234ce..d6ba15d 100644
--- a/kernel/sysfile.c
+++ b/kernel/sysfile.c
@@ -15,7 +15,7 @@
 #include "sleeplock.h"
 #include "file.h"
 #include "fcntl.h"
-
+uint64 total_bytes_read = 0;
 // Fetch the nth word-sized system call argument as a file descriptor
 // and return both the descriptor and the corresponding struct file.
 static int
@@ -72,11 +72,23 @@ sys_read(void)
   int n;
   uint64 p;
 
+  if(argfd(0, 0, &f) < 0)
+    return -1;
+  
   argaddr(1, &p);
   argint(2, &n);
-  if(argfd(0, 0, &f) < 0)
+  
+  if(n < 0)
     return -1;
-  return fileread(f, p, n);
+  
+  int result = fileread(f, p, n);
+  
+  // Track bytes read - only count successful reads
+  if(result > 0) {
+    total_bytes_read += result;
+  }
+  
+  return result;
 }
 
 uint64
@@ -503,3 +515,12 @@ sys_pipe(void)
   }
   return 0;
 }
+
+
+
+uint64
+sys_getreadcount(void)
+{
+  return total_bytes_read;
+}
+
diff --git a/kernel/sysproc.c b/kernel/sysproc.c
index 3044d00..9fb4480 100644
--- a/kernel/sysproc.c
+++ b/kernel/sysproc.c
@@ -105,3 +105,5 @@ sys_uptime(void)
   release(&tickslock);
   return xticks;
 }
+
+
diff --git a/kernel/trap.c b/kernel/trap.c
index a41cd69..e3b47f3 100644
--- a/kernel/trap.c
+++ b/kernel/trap.c
@@ -44,7 +44,7 @@ usertrap(void)
 
   // send interrupts and exceptions to kerneltrap(),
   // since we're now in the kernel.
-  w_stvec((uint64)kernelvec);  //DOC: kernelvec
+  w_stvec((uint64)kernelvec);
 
   struct proc *p = myproc();
   
@@ -81,8 +81,13 @@ usertrap(void)
     kexit(-1);
 
   // give up the CPU if this is a timer interrupt.
-  if(which_dev == 2)
-    yield();
+// give up the CPU if this is a timer interrupt.
+// BUT NOT for FCFS scheduler (which should be non-preemptive)
+if(which_dev == 2) {
+#ifndef SCHEDULER_FCFS
+  yield();
+#endif
+}
 
   prepare_return();
 
@@ -152,8 +157,13 @@ kerneltrap()
   }
 
   // give up the CPU if this is a timer interrupt.
-  if(which_dev == 2 && myproc() != 0)
-    yield();
+// give up the CPU if this is a timer interrupt.
+// BUT NOT for FCFS scheduler (which should be non-preemptive)
+if(which_dev == 2 && myproc() != 0) {
+#ifndef SCHEDULER_FCFS
+  yield();
+#endif
+}
 
   // the yield() may have caused some traps to occur,
   // so restore trap registers for use by kernelvec.S's sepc instruction.
@@ -161,9 +171,7 @@ kerneltrap()
   w_sstatus(sstatus);
 }
 
-void
-clockintr()
-{
+void clockintr() {
   if(cpuid() == 0){
     acquire(&tickslock);
     ticks++;
@@ -171,9 +179,11 @@ clockintr()
     release(&tickslock);
   }
 
-  // ask for the next timer interrupt. this also clears
-  // the interrupt request. 1000000 is about a tenth
-  // of a second.
+  #ifdef SCHEDULER_MLFQ
+  check_starvation_prevention();
+  check_preemption();  // Add this line
+  #endif
+
   w_stimecmp(r_time() + 1000000);
 }
 
diff --git a/user/ls.c b/user/ls.c
index da78748..39ab074 100644
--- a/user/ls.c
+++ b/user/ls.c
@@ -20,7 +20,6 @@ fmtname(char *path)
     return p;
   memmove(buf, p, strlen(p));
   memset(buf+strlen(p), ' ', DIRSIZ-strlen(p));
-  buf[sizeof(buf)-1] = '\0';
   return buf;
 }
 
diff --git a/user/printf.c b/user/printf.c
index 75546f4..bbc29b8 100644
--- a/user/printf.c
+++ b/user/printf.c
@@ -17,7 +17,7 @@ printint(int fd, long long xx, int base, int sgn)
 {
   char buf[20];
   int i, neg;
-  unsigned long long x;
+  uint x;
 
   neg = 0;
   if(sgn && xx < 0){
diff --git a/user/ulib.c b/user/ulib.c
index 45fadb0..a2f5a20 100644
--- a/user/ulib.c
+++ b/user/ulib.c
@@ -9,12 +9,11 @@
 // wrapper so that it's OK if main() does not call exit().
 //
 void
-start(int argc, char **argv)
+start()
 {
-  int r;
-  extern int main(int argc, char **argv);
-  r = main(argc, argv);
-  exit(r);
+  extern int main();
+  main();
+  exit(0);
 }
 
 char*
diff --git a/user/user.h b/user/user.h
index ac84de9..f1d2b62 100644
--- a/user/user.h
+++ b/user/user.h
@@ -47,3 +47,6 @@ void printf(const char*, ...) __attribute__ ((format (printf, 1, 2)));
 // umalloc.c
 void* malloc(uint);
 void free(void*);
+
+int getreadcount(void);
+// int sleep(int);
\ No newline at end of file
diff --git a/user/usys.pl b/user/usys.pl
index c5d4c3a..eae94f4 100755
--- a/user/usys.pl
+++ b/user/usys.pl
@@ -42,3 +42,4 @@ entry("getpid");
 entry("sbrk");
 entry("pause");
 entry("uptime");
+entry("getreadcount");
\ No newline at end of file


#LLM GENERATED CODE ENDS HERE 